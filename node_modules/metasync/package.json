{
  "name": "metasync",
  "version": "0.3.8",
  "author": {
    "name": "Timur Shemsedinov",
    "email": "timur.shemsedinov@gmail.com"
  },
  "description": "Asynchronous Programming Library",
  "license": "MIT",
  "keywords": [
    "flow",
    "collector",
    "parallel",
    "sequential",
    "asyncronous",
    "async",
    "callback",
    "errback",
    "err-first",
    "error-first",
    "callback-last",
    "thrattle",
    "impress",
    "utility",
    "utilities",
    "datacollector",
    "keycollector",
    "composition",
    "metasync",
    "metarhia"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/metarhia/metasync"
  },
  "main": "./metasync.js",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "npm run lint && node tests/all && tap test/*.js",
    "code-coverage": "tap test/*.js --100",
    "code-coverage-report": "tap test/*.js --coverage-report=html",
    "perf": "tests/load/run.sh",
    "lint": "eslint .",
    "docs": "metaschema ./metasync.js"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "dependencies": {
    "metarhia-common": "^0.0.22"
  },
  "devDependencies": {
    "metaschema": "^0.0.5",
    "eslint": "^4.4.0",
    "tap": "^10.7.0"
  },
  "contributors": [
    {
      "name": "Timur Shemsedinov",
      "email": "timur.shemsedinov@gmail.com"
    },
    {
      "name": "Alexey Orlenko",
      "email": "eaglexrlnk@gmail.com"
    },
    {
      "name": "Vlad Dziuba",
      "email": "dzyubavlad@gmail.com"
    },
    {
      "name": "Dmytro Nechai",
      "email": "nechaido@gmail.com"
    },
    {
      "name": "Oleksandr Kovalchuk",
      "email": "anxolerd@outlook.com"
    },
    {
      "name": "Vladyslav Dukhin",
      "email": "vladyslav.dukhin@gmail.com"
    },
    {
      "name": "Arthur Myronenko",
      "email": "gibslp69@gmail.com"
    },
    {
      "name": "Alexey Kachan",
      "email": "alexkachan@mail.ru"
    }
  ],
  "readme": "# Asynchronous Programming Library\n\n[![TravisCI](https://travis-ci.org/metarhia/metasync.svg?branch=master)](https://travis-ci.org/metarhia/metasync)\n[![bitHound](https://www.bithound.io/github/metarhia/metasync/badges/score.svg)](https://www.bithound.io/github/metarhia/metasync)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/60fe108b31614b4191cd557d49112169)](https://www.codacy.com/app/metarhia/metasync)\n[![NPM Version](https://badge.fury.io/js/metasync.svg)](https://badge.fury.io/js/metasync)\n[![NPM Downloads/Month](https://img.shields.io/npm/dm/metasync.svg)](https://www.npmjs.com/package/metasync)\n[![NPM Downloads](https://img.shields.io/npm/dt/metasync.svg)](https://www.npmjs.com/package/metasync)\n\n## Installation\n\n```bash\n$ npm install metasync\n```\n\n## Create a composed function from flow syntax\n`metasync.flow(fns)(data, done)`\n- `fns` - array of callback-last functions, callback contranct err-first\n- `data` - input data\n- `done` - err-first callback\n- returns: composed callback-last / err-first function\n\n![composition](https://cloud.githubusercontent.com/assets/4405297/16968374/1b81f160-4e17-11e6-96fa-9d7e2b422396.png)\n\n```JavaScript\nconst f = metasync.flow(\n  [f1, f2, f3, [[f4, f5, [f6, f7], f8]], f9]\n);\n```\n\n- Array of functions gives sequential execution: `[f1, f2, f3]`\n- Double brackets array of functions gives parallel execution: `[[f1, f2, f3]]`\n\n### Flow methods:\n- `flow(data, callback)` - composed flow, callback-last and err-first contracts\n- `flow.timeout(msec)` - set flow timeout\n- `flow.cancel()` - calcel flow\n- `flow.clone()` - clone flow\n- `flow.pause()` - pause flow\n- `flow.resume()` - resume flow\n\n## Collector\n`metasync.collect(expected)(key, error, value)`\n- expected - count or array of string\n- returns: collector instance\n\n### Collector methods:\n- `collector.collect(key, error, value)` - pick or fail\n- `collector.pick(key, value)` - pick a key\n- `collector.fail(key, error)` - fail a key\n- `collector.take(key, method, ...arguments)` - take method result\n- `collector.timeout(msec)` - set timeout\n- `collector.done(callback)` - set done listener with err-first contract\n- `collector.distinct(true/false)` - deny unlisted keys\n\nExample:\n```JavaScript\nconst metasync = require('metasync');\nconst fs = require('fs');\n\n// Data collector (collect keys by count)\nconst dc = metasync.collect(4);\n\ndc.pick('user', { name: 'Marcus Aurelius' });\nfs.readFile('HISTORY.md',\n  (err, data) => dc.collect('history', err, data)\n);\ndc.take('readme', fs.readFile, 'README.md');\nsetTimeout(() => dc.pick('timer', { date: new Date() }), 1000);\n\n// Key collector (collect certain keys by names)\nconst kc = metasync\n  .collect(['user', 'history', 'readme', 'timer'])\n  .timeout(2000)\n  .distinct()\n  .done((err, data) => console.log(data));\n\nkc.pick('user', { name: 'Marcus Aurelius' });\nkc.take('history', fs.readFile, 'HISTORY.md');\nkc.take('readme', fs.readFile, 'README.md');\nsetTimeout(() => kc.pick('timer', { date: new Date() }), 1000);\n```\n\n## Parallel execution\n`metasync.parallel(fns, data, callback)`\n- `fns` - array of callback-last functions, callback contranct err-first\n- `data` - incoming data (optional)\n- `callback` - err-first function on done\n\nExample:\n`metasync.parallel([f1, f2, f3], (err, data) => {});`\n\n## Sequential execution\n`metasync.sequential(fns, data, callback)`\n- `fns` - array of callback-last functions, callback contranct err-first\n- `data` - incoming data (optional)\n- `callback` - err-first function on done\n\nExample:\n```JavaScript\nmetasync.sequential([f1, f2, f3], (err, data) => {});\n```\n\n## Executes all asynchronous functions and pass first result to callback\n`metasync.firstOf(fns, callback)`\n- `fns` - array of callback-last functions, callback contranct err-first\n- `callback` - err-first function on done\n\n## Asynchronous map (iterate parallel)\n`metasync.map(items, fn, done)`\n- `items` - incoming array\n- `fn` - callback-last `(current, callback) => callback(err, value)`\n  - to be executed for each value in the array\n  - `current` - current element being processed in the array\n  - `callback` - err-first\n- `done` - optional err-first callback\n\n## Asynchrous filter (iterate parallel)\n`metasync.filter(items)`\n- `items` - incoming array\n\nExample:\n```JavaScript\nmetasync.filter(\n  ['data', 'to', 'filter'],\n  (item, callback) => callback(item.length > 2),\n  (err, result) => console.dir(result)\n);\n```\n\n## Asynchronous reduce\n`metasync.reduce(items, callback, done, initial)`\n- `items` - incoming array\n- `callback` - function to be executed for each value in array\n  - `previous` - value previously returned in the last iteration\n  - `current` - current element being processed in the array\n  - `callback` - callback for returning value back to function reduce\n  - `counter` - index of the current element being processed in array\n  - `items` - the array reduce was called upon\n- `done` - optional on done callback `function(err, result)`\n- `initial` - optional value to be used as first arpument in first iteration\n\n## Asynchronous each (iterate in parallel)\n`metasync.each(items, fn, done)`\n- `items` - incoming array\n- `fn` - callback-last `(value, callback) => callback(err)`\n  - `value` - item from items array\n  - `callback` - callback `function(err)`\n- `done` - optional on done callback `function(err)`\n\nExample:\n```JavaScript\nmetasync.each(\n  ['a', 'b', 'c'],\n  (item, callback) => {\n    console.dir({ each: item });\n    callback();\n  },\n  (err, data) => console.dir('each done')\n);\n```\n\n## Asynchronous series\n`metasync.series(items, fn, done)`\n- `items` - incoming array\n- `fn` - callback-last `(value, callback) => callback(err)`\n  - `value` - item from items array\n  - `callback` - callback `(err)`\n- `done` optional on done callback `function(err)`\n\nExample:\n```JavaScript\nmetasync.series(\n  ['a', 'b', 'c'],\n  (item, callback) => {\n    console.dir({ series: item });\n    callback();\n  },\n  (err, data) => {\n    console.dir('series done');\n  }\n);\n```\n\n## Asynchronous find (iterate in series)\n`metasync.find(items, fn, done)`\n- `items` - incoming array\n- `fn` - callback-last `(value, callback) => callback(err, accepted)`\n  - `value` - item from items array\n  - `callback` - callback function `(err, accepted)`\n- `done` - optional on done callback `function(err, result)`\n\nExample:\n```JavaScript\nmetasync.find(\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n  (item, callback) => (\n    callback(null, item % 3 === 0 && item % 5 === 0)\n  ),\n  (err, result) => {\n    console.dir(result);\n  }\n);\n```\n\n## Asynchronous every\n`metasync.every(items, fn, done)`\n- `items` - incoming array\n- `fn` - callback-last `(value, callback) => callback(err, fits)`\n  - `value` - item from items array\n  - `callback` - callback function `(err, fits)`\n- `done` - optional on done callback `function(err, result)`\n\n## Asynchronous some (iterate in series)\n`metasync.some(items)`\n- `items` - incoming array\n\n## Create an ArrayChain instance\n`metasync.for(array)`\n- `array` - start mutations from this data\n\n## ConcurrentQueue\n`new metasync.ConcurrentQueue(concurrency, timeout)`\n- `concurrency` - number of simultaneous and asynchronously executing tasks\n- `timeout` - process timeout (optional), for single item\n\n## Function throttling, executed once per interval\n`metasync.throttle(timeout, fn, args)`\n- `timeout` - msec interval\n- `fn` - function to be throttled\n- `args` - arguments array for fn (optional)\n\n## Debounce function, delayed execution\n`metasync.debounce(timeout, fn, args)`\n- `timeout` - msec\n- `fn` - function to be debounced\n- `args` - arguments array for fn (optional)\n\n## Set timeout for asynchronous function execution\n`metasync.timeout(timeout, fn, callback)`\n- `timeout` - time interval\n- `fn` - async function to be executed\n- `callback` - callback function on done\n\n## Queue instantiation\n`metasync.queue(concurrency)`\n- `concurrency` - number of simultaneous and asynchronously executing tasks\n\n## Transforms function with args arguments and callback\nto function with args as separate values and callback\n`metasync.toAsync(fn)`\n- `fn` - function contract callback-last, callback contranct err-first\n- Returns: function with arguments gathered from args as separate values\nand callback\n\n## async function\n`metasync.asAsync(fn, ...args)`\n- `fn` - function\n- `...args` - its argumants\n\n## Contributors\n\n  - Timur Shemsedinov (marcusaurelius)\n  - See github for full [contributors list](https://github.com/metarhia/metasync/graphs/contributors)\n",
  "bugs": {
    "url": "https://github.com/metarhia/metasync/issues"
  },
  "_id": "metasync@0.3.8",
  "dist": {
    "shasum": "786dadbb396bcb346703dd6643cb41109a59c91d"
  },
  "_from": "metasync@",
  "_resolved": "https://registry.npmjs.org/metasync/-/metasync-0.3.8.tgz"
}
