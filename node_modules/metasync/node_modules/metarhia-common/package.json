{
  "name": "metarhia-common",
  "version": "0.0.22",
  "author": {
    "name": "Timur Shemsedinov",
    "email": "timur.shemsedinov@gmail.com"
  },
  "description": "Metarhia Common Library",
  "license": "MIT",
  "keywords": [
    "metarhia",
    "common",
    "impress",
    "jstp",
    "globalstorege",
    "metasync"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/metarhia/common"
  },
  "main": "./common.js",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "eslint . && tap test/*.js",
    "code-coverage": "tap test/*.js --100",
    "code-coverage-report": "tap test/*.js --coverage-report=html",
    "lint": "eslint .",
    "docs": "metaschema ./common.js"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "devDependencies": {
    "metaschema": "^0.0.5",
    "eslint": "^4.4.0",
    "tap": "^10.7.0"
  },
  "readme": "# Metarhia Common Library\n\n[![TravisCI](https://travis-ci.org/metarhia/common.svg?branch=master)](https://travis-ci.org/metarhia/common)\n[![bitHound](https://www.bithound.io/github/metarhia/common/badges/score.svg)](https://www.bithound.io/github/metarhia/common)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/57f219ad89e64c848685a93f5f2f14c2)](https://www.codacy.com/app/metarhia/common)\n[![NPM Version](https://badge.fury.io/js/metarhia-common.svg)](https://badge.fury.io/js/metarhia-common)\n[![NPM Downloads/Month](https://img.shields.io/npm/dm/metarhia-common.svg)](https://www.npmjs.com/package/metarhia-common)\n[![NPM Downloads](https://img.shields.io/npm/dt/metarhia-common.svg)](https://www.npmjs.com/package/metarhia-common)\n\nNamespace: `api.common` in [Impress Application Server](https://github.com/metarhia/Impress)\n\n## Installation\n\n```bash\n$ npm install metasync\n```\n\n### Splits array into two parts\n`common.splitAt(index, array)`\n- `index:number` - index defining end of first part and start of second\n- `array:array` - to be splitted\n\nReturns: tuple with two parts of the array\n\n### Check is value scalar\n`common.isScalar(value)`\n- `value` - scalar value or Object\n\nReturns: boolean\n\n### Copy dataset (copy objects to new array)\n`common.copy(ds)`\n- `ds:array of objects` - source dataset\n\nReturns: array of objects\n\n### Clone Object\n`common.clone(obj)`\n- `obj:object or array`\n\nReturns: object or array\n\n### Duplicate object ot array\n`common.duplucate(obj)`\n- `obj:object or array`\n\nReturns: object or array\n\n### Read property by dot-separated path\n`common.getByPath(data, dataPath)`\n- `data:hash`\n- `dataPath:string` - dot-separated path\n\nReturns: value\n\n### Set property by dot-separated path\n`common.setByPath(data, dataPath, value)`\n- `data:hash`\n- `dataPath:string` - dot-separated path\n- `value` - new value\n\n### Delete property by dot-separated path\n`common.deleteByPath(data, dataPath)`\n- `data:object`\n- `dataPath:string` - dot-separated path\n\nReturns: boolean\n\n### Distinct merge miltiple arrays\n`common.merge(...args)`\n- `args:array of array`\n\nReturns: array\n\n### Substitute variables\n`common.subst(tpl, data, dataPath, escapeHtml)`\n- `tpl:string` - template body\n- `data:hash` - data structure to visualize\n- `dataPath:string` - current position in data structure\n- `escapeHtml:boolean` - escape html special characters if true\n\nReturns: string\n\n### Escape html characters\n`common.htmlEscape(content)`\n- `content:string` - to escape\n\nReturns: string\n\nExample: `htmlEscape('5>=5') = '5&lt;=5'`\n\n### Extract file extension in lower case with no dot\n`common.fileExt(fileName, Result)`\n- `fileName:string` - file name\n\nReturns: string\n\nExample: `fileExt('/dir/file.txt')`\n\nResult: 'txt'\n\n### Remove file extension from file name\n`common.removeExt(fileName, Result)`\n- `fileName:string` - file name\n\nReturns: string\n\nExample: `fileExt('file.txt')`\n\nResult: 'file'\n\n### Convert spinal case to camel case\n`common.spinalToCamel(name)`\n- `name:string`\n\nReturns: string\n\n### Escape regular expression control characters\n`common.escapeRegExp(s)`\n- `s:string`\n\nReturns: string\n\nExample:  escapeRegExp('/path/to/res?search=this.that')`\n\n### Generate escaped regular expression\n`common.newEscapedRegExp(s)`\n- `s:string`\n\nReturns: RegExp, instance\n\n### Add trailing slash at the end if it has no\n`common.addTrailingSlash(s)`\n- `s:string`\n\nReturns: string\n\n### Remove trailing slash from string\n`common.stripTrailingSlash(s)`\n- `s:string`\n\nReturns: string\n\n### Get directory name with trailing slash from path\n`common.dirname(filePath)`\n- `filePath:string`\n\nReturns: string\n\n### Capitalize string\n`common.capitalize(s)`\n- `s:string`\n\n### Extract substring between prefix and suffix\n`common.between(s, prefix, suffix)`\n- `s:string` - source\n- `prefix:string` - before needed fragment\n- `suffix:string` - after needed fragment\n\nReturns: string\n\n### Remove UTF-8 BOM\n`common.removeBOM(s)`\n- `s:string` - possibly starts with BOM\n\nReturns: string\n\n### Generate RegExp from array with '*' wildcards\n`common.arrayRegExp(items)`\n- `items:array of string`\n\nReturns: RegExp, instance\n\nExample: `['/css/*', '/index.html']`\n\n### Compare time1 and time2\n`common.isTimeEqual(time1, time2)`\n- `time1:string` - time or milliseconds\n- `time2:string` - time or milliseconds\n\nReturns: boolean\n\nExample: `isTimeEqual(sinceTime, buffer.stats.mtime);`\n\n### Current date in YYYY-MM-DD format\n`common.nowDate(now)`\n- `now:Date` (optional)\n\nReturns: string\n\n### Current date in YYYY-MM-DD  hh:mm format\n`common.nowDateTime(now)`\n- `now:Date` (optional)\n\nReturns: string\n\n### Function for mapping object fields\n`common.omap(mapFn, obj)`\n- `mapFn:funtion` - to appy to every field value\n- `obj:object` - which fields used for mapping\n\nReturns: object, with same reference but with transformed fields\n\n### Compose multiple functions into one\n`common.compose(...fns)`\n- `fns:array of function`\n\nReturns: function, composed\n\n### Apply given function to value or default value\n`common.maybe(fn, defVal, value)`\n- `fn:function`\n- `defVal` - default value\n- `value` (optional)\n\nReturns: result of `fn` or `defVal`\n\n### Zipping several arrays into one\n`common.zip(...arrays)`\n- `arrays` - array of array\n\nReturns: array, length is minimal of input arrays length\n\nHint: Element with index i of resulting array is array with\nelements with index i from input arrays\n\n### Create array of replicated value\n`common.replicate(count, elem)`\n- `count:number` - new array length\n- `elem` - value to replicate\n\nReturns: array, replicated\n\n### Zipping arrays using specific function\n`common.zipWith(fn, ...arrays)`\n- `fn:function` - for zipping elements with index i\n- `arrays:array of array`\n\nReturns: array\n\nHint: Element with index i of resulting array is result of fn called with arguments from arrays\n\n### Curries function until the condition\n`common.curryUntil(condition, fn, ...args)`\n- `condition:function` - (argsI, argsParts) returns boolean\n- `fn:function` - which will be curried\n- `args:array` - arguments for fn\n\nReturns: function, curried\n### Curry fn count times, first curry uses args for first currying\n`common.curryN(fn, count, ...args)`\n- `fn:function` - curried\n- `count:number` - of times function should be curried\n- `args:array` - arguments for first currying\n\nReturns: function, curried given times count\n\n### Curry function curry with fn\n`common.curryTwice(fn)`\n- `fn:function` - to be curried\n\nReturns: function, to pass arguments that returns curried fn\n\n### Curry function with given arguments\n`common.curry(fn, ...args)`\n- `fn:function`\n- `args:array` - arguments\n\nReturns: function, curried\n\n### Apply arguments\n`common.applyArgs(...args)`\n- `args:array` - arguments to save in closure\n\nReturns: function, to pass (fn) arguments will be applied\n\n### Get first not errored result of fn\n`common.either(fn)`\n- `fn:function` - to be called\n\nReturns: result of `fn`\n\n### Empy function\n`common.falseness()`\n\nReturns: boolean, always false\n\n### Empy function\n`common.trueness()`\n\nReturns: boolean, always true\n\n### Empy function\n`common.emptiness()`\n\nReturns: always undefined\n\n### Empy asynchronous callback-last single-argument function\n`common.nop(callback)`\n- `callback:function` - callback to be called with (null)\n\n### Empy asynchronous callback-last double-argument function\n`common.noop(empty, callback)`\n- `empty` - incoming value to be ignored\n- `callback:function` - callback to be called with (null, null)\n\n### Wrap function: call once, not null\n`common.once(fn)`\n- `fn:function (optional)`\n\nReturns: function, wrapped callback\n\nHint: previous name: `common.cb` (deprecated)\n\n### Extract callback function\nIt's unsafe: may return null, allow multiple calls\n`common.unsafeCallback(args)`\n- `args:array` - arguments\n\nReturns: function, callback or null\n\nHint: previous name: `common.cbUnsafe` (deprecated)\n\nHint: another alias: `common.extractCallback` (deprecated)\n\n### Exctracts callback and make it safe\nWrap collback with once and return common.emptiness if no callback\n`common.safeCallback(args)`\n- `args:array` - arguments\n\nReturns: function, wrapped callback\n\nHint: previous name: `cbExtract` (deprecated)\n\n### Exctracts callback and throw if no callback\n`common.requiredCallback(args)`\n- `args:array` - arguments\n\nReturns: function\n\n### Exctracts callback and make it safe\n`common.onceCallback(args)`\nWrap collback with once()\nand return common.emptiness if no callback\n- `args:array` - arguments\n\nReturns: function\n\n### Override method: save old to `fn.inherited`\n`common.override(obj, fn, Hint)`\n- `obj:object` - containing method to override\n- `fn:function` - name will be used to find method\n\nHint: Previous function will be accessible by obj.fnName.inherited\n\n### Generate int array from given range\n`common.range(from, to)`\n- `from:naumber` - range start\n- `to:naumber` - range end\n\nReturns: array\n\nExample: `range(1, 5) = [1, 2, 3, 4, 5]`\n\n### Generate int array from sequence syntax\n`common.sequence(seq, max, list, range from..to, range from..count, range from..max-to)`\n- `seq:array`\n- `max:number` - optional max\n\nReturns: array\n\nExample:\n- list: sequence([81, 82, 83]) = [81, 82, 83]\n- range from..to: sequence([81,,83]) = [81, 82, 83]\n- range from..count: sequence([81, [3]]) = [81, 82, 83]\n- range from..max-to: sequence([81, [-2]], 5) = [81, 82, 83]\n\n### Last array element\n`common.last(arr)`\n- `arr:array`\n\nReturns: element\n\n### Make function raise-safe\n`common.safe(fn)`\n- `fn:function`\n\nReturns: function, wrapped with try/catch interception\n\n### Generate random int in given range\n`common.random(min, max)`\n- `min:number` - range start\n- `max:number` - range end\n\nReturns: number\n\n### Shuffle an array\n`common.shuffle(arr)`\n- `arr:array`\n\nReturns: array\n\n### Enhanced EventEmitter with wildcard\n`common.emitter()`\n\nReturns: EventEmitter, instance\n\n### Rest left, transfor function\n`common.restLeft(fn)`\n- `fn:function` - (args, arg1..argN, callback)\n\nReturns: function, (arg1..argN, ...args, callback)\n\n### Parse duration to seconds\n`common.duration(s)`\n- `s:string` - duration syntax\n\nReturns: number, milliseconds\n\nExample: `duration('1d 10h 7m 13s')`\n\n### Convert int to string size Kb, Mb, Gb and Tb\n`common.bytesToSize(bytes)`\n- `bytes:number` - size\n\nReturns: string\n\n### Convert string with units to int\n`common.sizeToBytes(size)`\n- `size:string` - size\n\nReturns: number\n\n### Convert IP string to number\n`common.ip2int(ip)`\n- `ip:string` - IP address\n\nReturns: number\n\n### Get local network interfaces\n`common.localIPs()`\n\nReturns: srray of strings\n\n### Parse host string\n`common.parseHost(host)`\n- `host:string` - host or empty string, may contain `:port`\n\nReturns: string, host without port but not empty\n\n### Divide a long big endian encoded unsigned integer by a small one\n(i.e., not longer than a machine word) in-place and return the remainder\n`common.longDivModBE(buffer, divisor)`\n- `buffer:Buffer` - containing a divident\n- `divisor:a divisor as a Number`\n\nReturns: number, the remainder\n\n### Generate random key\n`common.generateKey(length, possible)`\n- `length:number` - key length\n- `possible:string` - with possible characters\n\nReturns: string, key\n\n### Generate an RFC4122-compliant GUID (UUID v4)\n`common.generateGUID()`\n\nReturns: string, GUID\n\n### Generate random SID\n`common.generateSID(config)`\n- `config:record` - { length, characters, secret }\n\nReturns: string, SID\n\n### Calculate SID CRC\n`common.crcSID(config, key)`\n- `config:record` - { length, characters, secret }\n- `key:string` - SID key\n\nReturns: string, CRC\n\n### Validate SID\n`common.validateSID(config, sid)`\n- `config:record` - { length, characters, secret }\n- `sid:string` - session id\n\nReturns: boolean\n\n### Calculate hash with salt\n`common.hash(password, salt)`\n- `password:string`\n- `salt:string`\n\nReturns: string, hash\n\n### Validate hash\n`common.validateHash(hash, password, salt)`\n- `hash:string`\n- `password:string`\n- `salt:string`\n\nReturns: boolean\n\n### Compare for array.sort with priority\n`common.sortComparePriority(priority, s1, s2)`\n- `priority:array of strings with priority`\n- `s1, s2:string` - to compare\n\nReturns: number\n\nExample: `files.sort(common.sortComparePriority)`\n\n### Compare for array.sort, directories first\n`common.sortCompareDirectories(a, b)`\n- `a, b:string` - to compare\n\nReturns: number\n\nExample: `files.sort(sortCompareDirectories);`\n\n### Compare for array.sort\n`common.sortCompareByName(a, b)`\n- `a, b:object` - { name } to compare\n\nReturns: number\n\nExample: `files.sort(sortCompareByName)`\n\n### Extend Map interface with:\n`common.cache()`\n\nReturns: object, cache instance\n- `cache.allocated` - total allocated size\n- `cache.add(key, val)` - add record\n- `cache.del(key)` - delete record\n- `cache.clr(prefix, fn)` - delete all if `key.startsWith(prefix)`\n\n### Splits string by the first occurrence of separator\n`common.section(s, separator)`\n- `s:string`\n- `separator:string` - or char\n\nReturns: `['All you need ', ' JavaScript']`\n\nExample: `rsection('All you need is JavaScript', 'is')`\n\n\n### Splits string by the last occurrence of separator\n`common.rsection(s, separator)`\n- `s:string`\n- `separator:string` - or char\n\nReturns: `['All you need is Jav', 'Script']`\n\nExample: `rsection('All you need is JavaScript', 'a')`\n\n### Splits string by multiple occurrence of separator\n`common.split(s, separator, limit)`\n- `s:string`\n- `separator:string (optional)` - default: ','\n- `limit:number (optional)` - max length of result array\n\n```js\nExample: split('a,b,c,d')\nResult: ['a', 'b', 'c', 'd']\n```\n\n```js\nExample: split('a,b,c,d', ',', 2)\nResult: ['a', 'b']\n```\n\n### Splits string by multiple occurrence of separator\n`common.rsplit(s, separator, limit)`\n- `s:string`\n- `separator:string (optional)` - default: ','\n- `limit:number (optional)` - max length of result array\n\n```js\nExample: split('a,b,c,d', ',', 2)\nResult: ['c', 'd']\n```\n\n### Splits string by multiple occurrence of separator\n`common.rsplit(s, separator, limit)`\n- `s:string`\n- `separator:string (optional)` - default: ','\n- `limit:number (optional)` - max length of result array\n\n```js\nExample: split('a,b,c,d', ',', 2)\nResult: ['c', 'd']\n```\n\n### Mixin for ES6 classes without overriding existing methods\n`common.mixin(target, source)`\n- `target` - mixin to target\n- `source` - source methods\n\n### Forward events from one EventEmitter to another\n`common.forwardEvents(from, to, events)`\n- `from:EventEmitter` - to listen for event\n- `to:EventEmitter` - to emit event on\n- `events:array of string` - event names\n\nExample: `common.forwardEvent(from, to);`\n\nExample: `common.forwardEvent(from, to, 'eventName');`\n\nExample: `common.forwardEvent(from, to, { eventName: 'newEventName' });`\n\nExample: `common.forwardEvent(from, to, ['eventName1', 'eventName2']);`\n\n### List method names\n`common.methods(iface)`\n- `iface:object` - to be introspected\n\nReturns: array of string, method names\n\n### List property names\n`common.properties(iface)`\n- `iface:object` - to be introspected\n\nReturns: array of string, property names\n\n## Contributors\n\n  - Timur Shemsedinov (marcusaurelius) <timur.shemsedinov@gmail.com>\n  - Vlad Dziuba (DzyubSpirit) <dzyubavlad@gmail.com>\n  - See github for full [contributors list](https://github.com/metarhia/common/graphs/contributors)\n",
  "bugs": {
    "url": "https://github.com/metarhia/common/issues"
  },
  "_id": "metarhia-common@0.0.22",
  "dist": {
    "shasum": "268fd682c8d7bab1ee15fe8feb08f1a2347ca4aa"
  },
  "_from": "metarhia-common@^0.0.22",
  "_resolved": "https://registry.npmjs.org/metarhia-common/-/metarhia-common-0.0.22.tgz"
}
